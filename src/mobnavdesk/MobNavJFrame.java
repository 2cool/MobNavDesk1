/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mobnavdesk;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author 2cool
 */




public class MobNavJFrame extends javax.swing.JFrame {
static private Point screenP=new Point();
static public TreePath selectionPaths[]=null;
static public int selectionRows[]=null;
static DefaultTreeModel model;
static private boolean zoomsCheck[]={false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};
static public  int greed=-1;
static private int oldtype=0;
static private Point select1=null,select2=null;

static private Point pressedPoint=null;
static public int zoom=1;

static final private int mapSizeInMaxZoom=134217728;
//final static public Object updMon=new Integer(0);
final static public UPD_MON updMon=new UPD_MON();
final private static int maxZoom=19;

    
    
    
   
    public MobNavJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel() 	{ 	    public void paint(Graphics g) 	    { 	        super.paint(g); 	        mypaint(g); 	    } 	};
        jComboBoxMaps = new javax.swing.JComboBox();
        jSliderZoom = new javax.swing.JSlider();
        jTextFieldZoom = new javax.swing.JTextField();
        jToggleButtonClearSelection = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jComboBoxGrid = new javax.swing.JComboBox();
        jToggleADD = new javax.swing.JButton();
        jToggleDelite = new javax.swing.JButton();
        jButtonCreateMap = new javax.swing.JButton();
        jTextFieldTILES = new javax.swing.JTextField();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jComboBoxTileSize = new javax.swing.JComboBox();
        jComboBoxTileFormat = new javax.swing.JComboBox();
        jCheckBoxRecreate = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelCompression = new javax.swing.JLabel();
        latitude = new javax.swing.JTextField();
        longitude = new javax.swing.JTextField();
        GO = new javax.swing.JButton();
        jButton_dont = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MobNavDesktop");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel1AncestorResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 675, Short.MAX_VALUE)
        );

        jComboBoxMaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMapsActionPerformed(evt);
            }
        });

        jSliderZoom.setMaximum(19);
        jSliderZoom.setValue(zoomIndex);/*
        jSliderZoom.setValue(1);
        */
        jSliderZoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderZoomStateChanged(evt);
            }
        });

        jTextFieldZoom.setEditable(false);
        jTextFieldZoom.setText("1");

        jToggleButtonClearSelection.setText("Clear Selections");
        jToggleButtonClearSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonClearSelectionActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Select zooms 2 add"));

        jCheckBox1.setText("0");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox2.setText("1");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox3.setText("2");
        jCheckBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox4.setText("3");
        jCheckBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox5.setText("4");
        jCheckBox5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox6.setText("5");
        jCheckBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox7.setText("6");
        jCheckBox7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox8.setText("7");
        jCheckBox8.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox9.setText("8");
        jCheckBox9.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox10.setText("9");
        jCheckBox10.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox11.setText("10");
        jCheckBox11.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox12.setText("11");
        jCheckBox12.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox13.setText("12");
        jCheckBox13.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox14.setText("13");
        jCheckBox14.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox15.setText("14");
        jCheckBox15.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox16.setText("15");
        jCheckBox16.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox17.setText("16");
        jCheckBox17.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox18.setText("17");
        jCheckBox18.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox19.setText("18");
        jCheckBox19.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox20.setText("19");
        jCheckBox20.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jCheckBox16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox20))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox11)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox15)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox11)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox14)
                    .addComponent(jCheckBox15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox16)
                    .addComponent(jCheckBox17)
                    .addComponent(jCheckBox18)
                    .addComponent(jCheckBox19)
                    .addComponent(jCheckBox20))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);
        setup_();

        jComboBoxGrid.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Grid disabled", "grid zoom 19", "grid zoom 18", "grid zoom 17", "grid zoom 16", "grid zoom 15", "grid zoom 14", "grid zoom 13", "grid zoom 12", "grid zoom 11", "grid zoom 10", "grid zoom 9", "grid zoom 8", "grid zoom 7", "grid zoom 6", "grid zoom 5", "grid zoom 4", "grid zoom 3", "grid zoom 2", "grid zoom 1", "grid zoom 0" }));
        jComboBoxGrid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxGridItemStateChanged(evt);
            }
        });

        jToggleADD.setText("ADD");
        jToggleADD.setEnabled(false);
        jToggleADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleADDActionPerformed(evt);
            }
        });

        jToggleDelite.setText("Delite");
        jToggleDelite.setEnabled(false);
        jToggleDelite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleDeliteActionPerformed(evt);
            }
        });

        jButtonCreateMap.setText("Create Map");
        jButtonCreateMap.setEnabled(false);
        jButtonCreateMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateMapActionPerformed(evt);
            }
        });

        jTextFieldTILES.setEditable(false);
        jTextFieldTILES.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldTILES.setText("0T-0B");

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.setEnabled(false);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Custom tile"));

        jComboBoxTileSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "128x128", "256x256" }));
        jComboBoxTileSize.setEnabled(false);
        jComboBoxTileSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTileSizeActionPerformed(evt);
            }
        });

        jComboBoxTileFormat.setEnabled(false);
        jComboBoxTileFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTileFormatActionPerformed(evt);
            }
        });
        setCompressionComboBox();

        jCheckBoxRecreate.setText("Recreate");
        jCheckBoxRecreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRecreateActionPerformed(evt);
            }
        });

        jLabel1.setText("Tiles size:");

        jLabel2.setText("Tiles format:");

        jLabelCompression.setText("compression:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxTileSize, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jCheckBoxRecreate)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxTileFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelCompression, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jCheckBoxRecreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxTileSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxTileFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCompression)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        latitude.setText("jTextField2");

        longitude.setText("jTextField1");

        GO.setText("GO");
        GO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GOActionPerformed(evt);
            }
        });

        jButton_dont.setText("dont");
        jButton_dont.setEnabled(false);
        jButton_dont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_dontActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jSliderZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(jTextFieldZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jToggleButtonClearSelection)
                            .addGap(18, 18, 18)
                            .addComponent(jComboBoxGrid, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)
                        .addComponent(jComboBoxMaps, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jToggleADD)
                                .addComponent(jButtonSave))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldTILES)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonCreateMap)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton_dont)
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jToggleDelite)
                                .addComponent(jButtonLoad))))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(latitude, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(longitude, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GO)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxMaps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(latitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(longitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSliderZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jToggleButtonClearSelection)
                            .addComponent(jComboBoxGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jToggleADD)
                            .addComponent(jToggleDelite)
                            .addComponent(jTextFieldTILES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCreateMap)
                            .addComponent(jButtonSave)
                            .addComponent(jButtonLoad)
                            .addComponent(jButton_dont))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        for (int i=0; i<inetMaps.im.length; i++)
        jComboBoxMaps.addItem(inetMaps.im[i].getName());
        try{
            jComboBoxMaps.setSelectedIndex(mapIndex);
        } catch (Exception ex) {}
        zoomStateChanged();
        screenP.x=scrP.x;
        screenP.y=scrP.y;

        pack();
    }// </editor-fold>//GEN-END:initComponents
    static final public InetMaps inetMaps=new InetMaps(updMon);
    private void zoomStateChanged(){
        int d=jSliderZoom.getValue()-zoom;
        if (d>0){
            screenP.x<<=d;
            screenP.y<<=d;
        }else if (d<0){
            d=-d;
            screenP.x>>=d;
            screenP.y>>=d;
        }
        zoom=jSliderZoom.getValue();
        synchronized(updMon){
            updMon.zoom=zoom;
        }
        jTextFieldZoom.setText(Integer.toString(zoom));     
    }
    private void jSliderZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderZoomStateChanged
        // TODO add your handling code here:
        zoomStateChanged();
        repaintt();

    }//GEN-LAST:event_jSliderZoomStateChanged

   
    public String grad_min_sec(double k,char N, char S){
        boolean minus=(k<0);
        k=Math.abs(k);
        double gr=Math.floor(k);
        double m=Math.floor((k-gr)*60);
        double sec=(k-gr-m/60)*3600;
        DecimalFormatSymbols s = new DecimalFormatSymbols();
        s.setDecimalSeparator('.');
        DecimalFormat f = new DecimalFormat("#,##0.00", s);
        return Integer.toString((int)gr)+"°"+Integer.toString((int)m)+"'"+f.format(sec)+"\" "+((minus)?S:N);
     
    }

private void fromPointToLatLng(){
    double i=(double)(Double.parseDouble(jTextFieldZoom.getText()));
    double y=(double)screenP.y/Math.pow(2, i);
    double x=(double)screenP.x/Math.pow(2, i);
    double lat=(2 * Math.atan(Math.exp((y - 128) / -(256 / (2 * Math.PI)))) -
             Math.PI / 2)/ (Math.PI / 180.0);
    double lng=(x - 128.0) / (256.0 / 360.0);

     longitude.setText(grad_min_sec(lng,'E','W'));
     latitude.setText(grad_min_sec(lat,'N','S'));
    }


    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        

        screenP.x+= pressedPoint.x-evt.getX();
        screenP.y+= pressedPoint.y-evt.getY();
        pressedPoint.setLocation(evt.getPoint());
       fromPointToLatLng();
          
          
        mypaint(jPanel1.getGraphics());
        //repaint();
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
            if (evt.getClickCount()==1){
            pressedPoint=evt.getPoint();
        }else{
           setSelectBox(evt.getPoint());
        }
        repaint();  
    }//GEN-LAST:event_jPanel1MousePressed

    private void jComboBoxGridItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxGridItemStateChanged
        // TODO add your handling code here:
         greed=jComboBoxGrid.getSelectedIndex()-1;
        if (greed>=0)
            greed=maxZoom-greed;
        checkCheckBoxes();
        repaint();
    }//GEN-LAST:event_jComboBoxGridItemStateChanged
 private void reloadTree(){
        int a[]=null;
        if (selectionPaths!=null){
            a=new int[selectionRows.length];
            System.arraycopy(selectionRows, 0, a, 0, selectionRows.length);
        }
         model.reload();        
         if (a!=null)
             jTree1.setSelectionRows(a);

    }
 private int checked=0;
 
 
 private void checkCheckBoxes(){
         Component []c=jPanel2.getComponents();
         for (int i=0; i<c.length; i++){
             JCheckBox cb=((JCheckBox)c[i]);
             int ind=Integer.parseInt(cb.getText());
             
             if (ind<greed && zoomsCheck[ind])
                    cb.doClick();                        
             cb.setEnabled(!(ind<greed));                          
         }
 }
 private void checkAddButon(){
     jToggleADD.setEnabled(checked>0 && select2!=null && select1!=null); 
 }
    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        // TODO add your handling code here:
        String s=evt.getItem().toString();
        int b=s.lastIndexOf("text=");    
        String str=s.substring(b+5, s.length()-1);      
        int i=Integer.parseInt(str.trim());
        zoomsCheck[i]^=true;
        checked+=(zoomsCheck[i]==true)?1:-1;
        checkAddButon(); 
        checkCheckBoxes();
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jToggleADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleADDActionPerformed
        // TODO add your handling code here:
          int n=MAPS_SET.add(zoomsCheck, select1Grid,select2Grid);
         
          
          
          
          enableButtons();
         // jToggleDelite.setEnabled(MAPS_SET.tiles>0);
        if (n>0){
            reloadTree();
            select1=select2=null;
            repaint();
        }
    }//GEN-LAST:event_jToggleADDActionPerformed
    private void enableButtons(){
        jButton_dont.setEnabled(MAPS_SET.tiles>0);
         jButtonCreateMap.setEnabled(MAPS_SET.tiles>0);
         jButtonSave.setEnabled(MAPS_SET.tiles>0); 
    }
    private void jToggleDeliteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleDeliteActionPerformed
        // TODO add your handling code here:
        
        
        MAPS_SET.delite();
        jTextFieldTILES.setText(Long.toString(MAPS_SET.tiles));          
        enableButtons();
        reloadTree();
    }//GEN-LAST:event_jToggleDeliteActionPerformed

    private void jToggleButtonClearSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonClearSelectionActionPerformed
        // TODO add your handling code here:
        select1=select2=select1Grid=select2Grid=null;
        checkAddButon();
        repaint();
    }//GEN-LAST:event_jToggleButtonClearSelectionActionPerformed
    static public String mapFileName=null;
    private void startMapCreation(){
        mapFileName=saveDialog("map","Maps");
        if (mapFileName!=null){
            mapFileName+=".map";
            java.awt.EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    new CMAPJFrame(mapFileName).setVisible(true);
                }
            });
        }
    }
    private void jButtonCreateMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateMapActionPerformed
        // TODO add your handling code here:
        createMap=true;
        startMapCreation();
        
    }//GEN-LAST:event_jButtonCreateMapActionPerformed
    final static String ext="atl";
    
    public String saveDialog(final String ext, final String desk){
         String filePath=null;
    
        JFileChooser chooser = new JFileChooser();        
        // Note: source for ExampleFileFilter can be found in FileChooserDemo,
        // under the demo/jfc directory in the Java 2 SDK, Standard Edition.
        ExampleFileFilter filter = new ExampleFileFilter();
        filter.addExtension(ext);
        filter.addExtension(ext.toUpperCase());
        filter.setDescription(desk);
       
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {      
            filePath= chooser.getSelectedFile().getPath();            
        }
        return filePath;
    }
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // TODO add your handling code here:
    String filePath=saveDialog(ext,"map assembler");
    
    if (filePath!=null){
         if (!filePath.endsWith(ext))
             filePath+="."+ext;
         FileOutputStream out=null;
         File fc=new File(filePath);
         if (fc.exists())
             fc.delete();
        try {
            out=new FileOutputStream(fc);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MobNavJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
         for (int l_zoom=0; l_zoom<=19; l_zoom++){   
             String sZoom=Integer.toString(l_zoom);
            if (MAPS_SET.zooms[l_zoom]!=null){
                int cnt=MAPS_SET.zooms[l_zoom].getChildCount();
                for (int n=0; n<cnt; n++){
                    String  str=sZoom+","+MAPS_SET.zooms[l_zoom].getChildAt(n).toString().trim()+"\n"; 
                    try {
                        out.write(str.getBytes());
                    } catch (IOException ex) {
                        Logger.getLogger(MobNavJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
              }
            }
        }
       
         
        try {
            out.close();
            renameMap(filePath);
        } catch (IOException ex) {
            Logger.getLogger(MobNavJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    }//GEN-LAST:event_jButtonSaveActionPerformed
    private void renameMap(String filePath){
        filePath=filePath.replace('\\', '/');
        String separator="/";//System.getProperty("file.separator");
        String []aname=filePath.split(separator);
        String name=aname[aname.length-1];
        name=name.substring(0, name.length()-ext.length()-1);        
        MAPS_SET.rename(name);
        model = (DefaultTreeModel)jTree1.getModel();        
        model.setRoot(MAPS_SET.myMap);        
    }
    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        // TODO add your handling code here:
        

        
    String filePath=null;
    {
        JFileChooser chooser = new JFileChooser();
        // Note: source for ExampleFileFilter can be found in FileChooserDemo,
        // under the demo/jfc directory in the Java 2 SDK, Standard Edition.
        ExampleFileFilter filter = new ExampleFileFilter();
        filter.addExtension(ext);
        filter.addExtension(ext.toUpperCase());
        filter.setDescription("Attlass");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {      
            filePath= chooser.getSelectedFile().getPath();            
        }
    }
    if (filePath!=null){
         File fc;
         FileInputStream in;
         fc=new File(filePath);
        try {
            if (fc.exists()==false)
                return;
            
            MAPS_SET.clear();
            model = (DefaultTreeModel)jTree1.getModel();        
            model.setRoot(MAPS_SET.myMap);
            
            
            in=new FileInputStream(fc);
            byte []b=new byte[(int)fc.length()];
            try {
                int readed=in.read(b);
                String []str=new String(b).split("\n");
                for (int i=0; i<str.length; i++){
                    String []a=str[i].split(",");
                    int lzoom=Integer.parseInt(a[0]);
                     if (MAPS_SET.zooms[lzoom]==null){
                        MAPS_SET.zooms[lzoom]=(new DefaultMutableTreeNode(lzoom)); 
                        MAPS_SET.myMap.add(MAPS_SET.zooms[lzoom]);
                    }                          
                    MAPS_SET.zooms[lzoom].add( new DefaultMutableTreeNode(a[1]));   
                    MAPS_SET.tiles+=MAPS_SET.pasreSize(a[1]);
                }

            } catch (Exception ex) {
                Logger.getLogger(MobNavJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MobNavJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jTextFieldTILES.setText(Long.toString(MAPS_SET.tiles));
       enableButtons();      
        reloadTree(); 
        renameMap(filePath);
    }
    }//GEN-LAST:event_jButtonLoadActionPerformed
    static final String setName="/MobNavDesk.set";
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        // TODO add your handling code here:
        saveSettings();
         
     
    }//GEN-LAST:event_formWindowClosing
    static public boolean recreateTiles=false;
    private void jCheckBoxRecreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRecreateActionPerformed
        // TODO add your handling code here:
        recreateTiles^=true;
        jComboBoxTileSize.setEnabled(recreateTiles);
        jComboBoxTileFormat.setEnabled(recreateTiles);
        recompress=recreateTiles;
        repaintt();
    }//GEN-LAST:event_jCheckBoxRecreateActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        updater();
        fromPointToLatLng();
    }//GEN-LAST:event_formWindowOpened
    static  public int tileSize=128;
    private void jComboBoxTileSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTileSizeActionPerformed
        // TODO add your handling code here:
        tileSize=(jComboBoxTileSize.getSelectedIndex()==0)?128:256;
        recompress=recreateTiles;
        repaintt();
    }//GEN-LAST:event_jComboBoxTileSizeActionPerformed
    static public boolean formatDontChange=true;
    static private int []jpgC={75,70,65,60,55,50,45,40,35,30,25,20,15,10};
    private void setCompressionComboBox(){        
            jComboBoxTileFormat.addItem("PNG");
            for (int i=0; i< jpgC.length; i++)
                jComboBoxTileFormat.addItem("JPG-"+jpgC[i]);    
    }
    private void jComboBoxTileFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTileFormatActionPerformed
        // TODO add your handling code here:
        int i=jComboBoxTileFormat.getSelectedIndex();
        
            if (i==0)
                ImgCompressor.compression=2;
            else{
                compression=ImgCompressor.compression=((float)jpgC[i-1])*0.01f; 
            } 
            recompress=recreateTiles;
        
       repaintt();
    }//GEN-LAST:event_jComboBoxTileFormatActionPerformed
    private void imgMDispose(){
        if (r==null)
            return;
         synchronized (imgMon){
            int sx=2+(r.width>>8); int sy=2+(r.height>>8);
            for (int y=0; y<sy; y++)
                for (int x=0; x<sx; x++)
                    if (imgM[x][y]!=null){
                        imgM[x][y].flush();
                        
                    }
         }
    }
    BufferedImage bi=null;
    Graphics g=null;
    private void jPanel1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel1AncestorResized
        // TODO add your handling code here:
        
        //System.out.println("RESIZED");
        r=jPanel1.getBounds();
        int sx=2+(r.width>>8); int sy=2+(r.height>>8);
        if (bi!=null){
            g.finalize();
            bi.flush();
            
        }
        bi=new BufferedImage(r.width,r.height,BufferedImage.TYPE_INT_ARGB);
        g=bi.getGraphics();
        synchronized (imgMon){
            imgM=new MyTile[sx][sy];
            for (int y=0; y<sy; y++)
                for (int x=0; x<sx; x++)
                    imgM[x][y]=new MyTile();
         }    
         imgMDispose();          
       
        
    }//GEN-LAST:event_jPanel1AncestorResized

    private void jComboBoxMapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMapsActionPerformed
        // TODO add your handling code here:
          inetMaps.type=jComboBoxMaps.getSelectedIndex();
        if (oldtype!=inetMaps.type){
            oldtype=inetMaps.type;            
            repaintt();
        }
    }//GEN-LAST:event_jComboBoxMapsActionPerformed


    


    private void GOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GOActionPerformed
        // TODO add your handling code here:

        screenP.x=0;
        screenP.x=0;
        repaint();
    }//GEN-LAST:event_GOActionPerformed
    private boolean createMap=true;
    private void jButton_dontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_dontActionPerformed
        // TODO add your handling code here:
        createMap=false;
        startMapCreation();
    }//GEN-LAST:event_jButton_dontActionPerformed

    private static boolean  dont =false;//-----------------------------------------------------------------
     public void repaintt(){
         
        imgMDispose();
        mypaint(jPanel1.getGraphics());
        fromPointToLatLng();
    }
     
     
     
     static boolean recompress=false;
     static float compression=0;
     
     
     static MyTile recompress(final MyTile t){
         if (t.img==null)
             return t;
         MyTile nt=new MyTile();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            ImageOutputStream  out = ImageIO.createImageOutputStream(baos);
            ImgCompressor ic=new ImgCompressor(out);
            t.size=0;
            BufferedImage img=new BufferedImage(256,256,BufferedImage.TYPE_INT_ARGB);
            Graphics g=img.getGraphics();
            if (tileSize==128){
                int []size={0,0,0,0,0};
                size[1]=        ic.write((BufferedImage)t.img, 128,  0, 0, out);
                size[2]=size[1]+ic.write((BufferedImage)t.img, 128,  -128, 0, out);
                size[3]=size[2]+ic.write((BufferedImage)t.img, 128,  0, -128, out);
                size[4]=size[3]+ic.write((BufferedImage)t.img, 128,  -128, -128, out);
                byte []b=baos.toByteArray();
                for (int i=0;i<4; i++){
                    InputStream in = new ByteArrayInputStream(b,size[i],size[i+1]-size[i]);
                    int x=(i&1)<<7;
                    int y=(i>>1)<<7;
                    g.drawImage(ImageIO.read(in), x , y, null);
                }
                nt.size=size[4];
                nt.img=img;                 
            }else{
                nt.size=ic.write((BufferedImage)t.img, 256, 0, 0, out);
                byte []b=baos.toByteArray();
                InputStream in = new ByteArrayInputStream(b);
                nt.img = ImageIO.read(in);  
            }
            return nt;
          } catch (IOException ex) {}
         return new MyTile();
     }
     
     
     
    private static Image blankT=null; 
    private static BufferedImage getColoredTile(){
        BufferedImage i=new BufferedImage(256,256,BufferedImage.TYPE_INT_ARGB);
        Graphics ig=i.getGraphics();
        ig.setColor(Color.white);
        ig.fillRect(0, 0, 256, 256);
        ig.setColor(Color.gray);
        ig.drawString("   Loading...", 0 , 100);
        return i;
    } 
     /* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ */
       final private Integer imgMon=new Integer(0);
    private int oldtx=0, oldty=0;
    private void dragImgM(final Point c){
        int tx=c.x>>8;
        int ty=c.y>>8;
        int iix=-(oldtx-tx);
        int iiy=-(oldty-ty);
        //ix=-ix;
        //iy=-iy;
        if (iix!=0 || iiy!=0){
            try{
            int sx=imgM.length;
            int sy=imgM[0].length;
            MyTile [][]timg=new MyTile[sx][sy];                                                            
            for (int y=0,iy=iiy; y<sy; y++,iy++)
                for (int x=0,ix=iix; x<sx; x++,ix++){                    
                    if (ix>=0 && ix<sx && iy>=0 && iy<sy){
                        timg[x][y]=imgM[ix][iy];
                        //if (timg[x][y].img!=null) timg[x][y].img.getGraphics().fillRect(0, 0, 100, 100);
                        
                    }else{
                        timg[x][y]=new MyTile();
                        int xx=sx+((ix<0)?ix:-ix);
                        int yy=sy+((iy<0)?iy:-iy);
                        if (xx>=0 && xx<sx && yy>=0 && yy<sy && imgM[xx][yy]!=null)
                            imgM[xx][yy].flush();                    
                    }

                }
            oldtx=tx;
            oldty=ty;
            imgM=timg;
            }catch (Exception ex){System.out.println("dragImgM "+ex.toString());}
        }
    }
     
    private Rectangle r=null;
    MyTile [][]imgM=null;
   
    
    private double tileSizeM=0;
    private void mypaint(Graphics sg){
        try{
     double size=0,sizeR=0,n=imgM.length*imgM[0].length,blank=0;
     synchronized (imgMon){
        if (r==null || imgM==null)return;
        Point center=new Point(screenP.x-(r.width>>1),screenP.y-(r.height>>1));
        //imgM[x][y];
        Point d=new Point(center.x&255,center.y&255);
               
        dragImgM(center); 
        
        for (int my=0,y=center.y; y<=center.y+r.height+256; y+=256,my++){
            int sy=(my<<8)-d.y;
            for (int mx=0,x=center.x; x<=center.x+r.width+256; x+=256,mx++){
                int sx=(mx<<8)-d.x;                
                MyTile tile=(imgM[mx][my].img!=null)?imgM[mx][my]:(imgM[mx][my]=inetMaps.getTile(x>>8, y>>8, zoom));                                                                                                 
                size+=tile.size;
                Image img=tile.img;
                if (recompress){
                    MyTile nt=recompress(tile); 
                    sizeR+=nt.size;
                    img=nt.img;                   
                }                
                 if (img==null){
                     img=blankT;
                     blank++;
                 }
                    g.drawImage(img, sx, sy, null);                
            }
        }

     }
     if (blank==0 && size>0){
        String compr="";
        if (sizeR>0)
            compr+=("Compression: "+((int)(100*sizeR/size))+"%");
        /* if (recreateTiles){
            if (recompress)
                tileSizeM=sizeR;
        }else
            tileSizeM=size;*/
        tileSizeM=(sizeR>0)?sizeR:size;
        tileSizeM/=n;
        jLabelCompression.setText(compr);
        jTextFieldTILES.setText(Long.toString(MAPS_SET.tiles)+"-"+getMapSize());        
        recompress=false;
     }
     
   
      
     
      g.setColor(Color.red);
     
      drawCross(g);
      drawSelectingBox(g);
     paintSelectdPath(g);
      drawGrid(g);
      sg.drawImage(bi, 0, 0, null);
     
       
        }catch (Exception ex){System.out.println("mypaint "+ex.toString());}
      
        
}
 private String getMapSize(){      
      String str="BKMGTP";
      double mapSize=tileSizeM*MAPS_SET.tiles;
      if (mapSize>0){
        double z=1;
        int i=0;
        while (mapSize*z>=1000){
            z*=0.001;
            i++;
        }
        return ""+((Double.toString(mapSize*z).substring(0,3))+str.substring(i, i+1)); 
      }
      return "0B";   
 }
 private void drawGrid(Graphics g){   
        int dz;
        if (greed==-1 || (dz=greed-zoom)>6)
            return;
                     
        int gridSize=256;
        if (dz>0){
           gridSize>>=dz; 
        }else{
            dz=-dz;
            gridSize<<=dz;
        }
        if (gridSize>0){
            g.setColor(new Color(0,255,0,100));
            Rectangle r=jPanel1.getBounds();
            
            Point p=new Point((r.width>>1)-screenP.x,(r.height>>1)-screenP.y);

            int xx=p.x%gridSize;
            if (p.x>xx)
                xx=p.x;
             int y=p.y%gridSize;
            if (p.y>y)
                y=p.y;
           int mapSizeInPix=getMapSizeInPix();
           int x1=Math.min(mapSizeInPix-screenP.x+(r.width>>1),r.width);
           int y1=Math.min(mapSizeInPix-screenP.y+(r.height>>1),r.height);

            for (int x=xx; x<=x1; x+=gridSize)
                g.drawLine(x, y, x, y1);
           
            for (; y<=y1; y+=gridSize)
                g.drawLine(xx, y, x1, y);
                   
        }
    }
private int getMapSizeInPix(){return (2<<(zoom+7)); }
void paintSelectdPath(final Graphics g){
   if (selectionPaths!=null)
          for (int i=0; i<selectionPaths.length; i++){
              String a[]=selectionPaths[i].toString().split(",");
              if (a.length==2){
                  int c_zoom=Integer.parseInt(a[1].substring(0, a[1].length()-1).trim());
                  if (MAPS_SET.zooms[c_zoom]!=null)
                      for (int j=0; j<MAPS_SET.zooms[c_zoom].getChildCount(); j++){
                        String aa[]=MAPS_SET.zooms[c_zoom].getChildAt(j).toString().split(MAPS_SET.devider);
                        paintSelection(g,c_zoom,aa[1],aa[2],aa[3],aa[4]);
                      }
              }else 
                  if (a.length==3){
                      int czoom=Integer.parseInt(a[1].trim());
                      a=a[2].split(MAPS_SET.devider);
                      paintSelection(g,czoom,a[1],a[2],a[3],a[4].substring(0, a[4].length()-1));                  
                  }
          }
  
}  
 private void paintSelection(final Graphics g, final int zoom, final String p0x,final String p0y, final String p1x, final String p1y){
    Point p1=new Point(Integer.parseInt(p0x)<<8,Integer.parseInt(p0y)<<8);
    Point p2=new Point(Integer.parseInt(p1x)<<8,Integer.parseInt(p1y)<<8);
    int dz=19-zoom;

    p1.x<<=dz;
    p1.y<<=dz;
    p2.x<<=dz;
    p2.y<<=dz;

    p1=getScreen(p1);
    p2=getScreen(p2);
    g.setColor(new Color(255,255,0,100));
    g.fillRect(p1.x, p1.y, p2.x-p1.x, p2.y-p1.y);
}

 private Point getMapInMaxZoom(final Point p){
        Rectangle r=jPanel1.getBounds();
        int dz=maxZoom-zoom;
        Point out=new Point(screenP.x+p.x-(r.width>>1),screenP.y+p.y-(r.height>>1));
        out.x<<=dz;
        out.y<<=dz;
        return out;
    }
    private Point getScreen(final Point mMaxZoom){
        int dz=maxZoom-zoom;
        Point out=new Point(mMaxZoom.x>>dz,mMaxZoom.y>>dz);
        Rectangle r=jPanel1.getBounds();
        out.x+=(r.width>>1)-screenP.x;
        out.y+=(r.height>>1)-screenP.y;       
        return out;
    }
private void enableDeliteToggle(){
  /*  boolean enable=false;
         if (MobNavJFrame.selectionPaths!=null)
          for (int i=0; i<MobNavJFrame.selectionPaths.length; i++){
              String a[]=MobNavJFrame.selectionPaths[i].toString().split(",");
              if (a.length==3){
                  enable=true;
              }
           }*/
           jToggleDelite.setEnabled(jButtonCreateMap.isEnabled() && MobNavJFrame.selectionPaths!=null);
}
//-----------------------------------
static public String userHome;
static int mapIndex=0;
static int zoomIndex=1;
 private void saveSettings(){

         File fc=new File(userHome+setName);
         if (fc.exists())
             fc.delete();
        try {
           FileOutputStream out=new FileOutputStream(fc);
            String s=""+zoom+"\n"+jComboBoxMaps.getSelectedIndex()+"\n"+screenP.x+"\n"+screenP.y;            
            out.write(s.getBytes());
            out.close();
        } catch (Exception ex) {
            Logger.getLogger(MobNavJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}
 static private Point scrP=new Point();
static private void loadSettings(){//if (true)return;
    userHome=System.getProperty("user.home");
      File fc;
         FileInputStream in;
         fc=new File(userHome+setName);        
            if (fc.exists()){                              
            try {
                in=new FileInputStream(fc);
                byte []b=new byte[(int)fc.length()];
                in.read(b);
                String s=new String(b);
                String []a=s.split("\n");

                zoomIndex=Integer.parseInt(a[0]);
                mapIndex=Integer.parseInt(a[1]);                                                   
                scrP.x=Integer.parseInt(a[2]);
                scrP.y=Integer.parseInt(a[3]);               
                
            } catch (Exception ex) {
                Logger.getLogger(MobNavJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
                //byte []b=new byte[(int)fc.length()];

            }
     
}
   //-------------------------------------------------------------------------
private void setup_(){
    jTree1.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
      public void valueChanged(TreeSelectionEvent e) {
        selectionPaths=jTree1.getSelectionPaths(); 
        selectionRows=jTree1.getSelectionRows();
        
        enableDeliteToggle();
       // System.out.println(selectionPaths.toString());
        repaint();
      }
    });
     model = (DefaultTreeModel)jTree1.getModel();        
     model.setRoot(MAPS_SET.myMap);
    
     
}    
   //-------------------------------------------------------------------------
    private void setSelectBox(final Point evtP){
        
         Point p=getMapInMaxZoom(evtP);
         if (p.x<0 || p.y<0 || p.x>mapSizeInMaxZoom || p.y>mapSizeInMaxZoom)
             return;
         p.x&=0xffffff00;
         p.y&=0xffffff00;
         
        if (select1==null)
            select1=p;
        else 
            if (select2==null){                
                select2=p;
            }else{
                if (Math.abs(select1.x-p.x)<Math.abs(select2.x-p.x))
                    select1.x=p.x;
                else
                    select2.x=p.x;
                if (Math.abs(select1.y-p.y)<Math.abs(select2.y-p.y))
                    select1.y=p.y;
                else
                    select2.y=p.y;                    
            }
        if (select2!=null){
            if (select1.x>select2.x){
                select1.x^=select2.x;
                select2.x^=select1.x;
                select1.x^=select2.x;
            }
            if (select1.y>select2.y){
                select1.y^=select2.y;
                select2.y^=select1.y;
                select1.y^=select2.y;
            }

          //  select2.x+=256;
         //   select2.y+=256;

                
        }
        checkAddButon(); 
       
    }
     //------------------------------------------------------------------------- 
   private void drawCross(Graphics g){ 
        Rectangle r=jPanel1.getBounds(); 
        int x=r.width>>1;
        int y=r.height>>1;
        g.drawLine(x-20, y, x+20, y);
        g.drawLine(x, y-20, x, y+20);
   } 
   static private Point select1Grid=null,select2Grid=null;
   //-------------------------------------------------------------------------
   private void drawSelectingBox(Graphics g){//if (true)return;
        if (select1!=null && select2!=null){
            Point p1=getScreen(select1);
            Point p2=getScreen(select2);//new Point(select2.x+256,select2.y+256));
            g.setColor(Color.red);
            g.drawRect(p1.x, p1.y, p2.x-p1.x, p2.y-p1.y);        
            int d=(greed==-1)?0:maxZoom-greed; 
           int add= 256<<d;
           int mask=-add;
           select1Grid=new Point(select1.x&mask,select1.y&mask);
           select2Grid=new Point(add+(select2.x&mask),add+(select2.y&mask)); 
           p1=getScreen(select1Grid);
           p2=getScreen(select2Grid);
           g.setColor(new Color(255,0,0,100));
           g.fillRect(p1.x, p1.y, p2.x-p1.x, p2.y-p1.y);
       }
   }
    

     private void updater(){
         new Thread(new Runnable() {
            @Override
            public void run() {  
        System.out.println("UPDETER RUNNING");
         
             while(true){
                try {
                 synchronized(updMon){   
                    updMon.wait();  
                 }
                    System.out.println("UPDETER REPAINT");
                    mypaint(jPanel1.getGraphics());
                } catch (InterruptedException ex) {
                    Logger.getLogger(MobNavJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
             }
         
            }}).start();
         
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        blankT=getColoredTile();
        loadSettings();
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MobNavJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MobNavJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MobNavJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MobNavJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MobNavJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GO;
    private javax.swing.JButton jButtonCreateMap;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButton_dont;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JCheckBox jCheckBoxRecreate;
    private javax.swing.JComboBox jComboBoxGrid;
    private javax.swing.JComboBox jComboBoxMaps;
    private javax.swing.JComboBox jComboBoxTileFormat;
    private javax.swing.JComboBox jComboBoxTileSize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCompression;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSliderZoom;
    private javax.swing.JTextField jTextFieldTILES;
    private javax.swing.JTextField jTextFieldZoom;
    private javax.swing.JButton jToggleADD;
    private javax.swing.JButton jToggleButtonClearSelection;
    private javax.swing.JButton jToggleDelite;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextField latitude;
    private javax.swing.JTextField longitude;
    // End of variables declaration//GEN-END:variables
}
